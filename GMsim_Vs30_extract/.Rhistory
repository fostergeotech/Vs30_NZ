attach(dummy)
ls()
x
lrf <- lowess(x,y)
lrf
plot(x,y)
linex(x,lrf$y)
lines(x,lrf$y)
abline(0,1,lty=3)
?abline
?ogrListLayers
ogrListLayers(d)
OGRSpatialRef(d)
a
a$1
a[0]
a[1]
type(a)
help("$")
??type
typeod(d)
typeof(d)
geo1 <- readOGR(d, "Geology_polys")
geo1 <- readOGR(d)
geo1 <- readOGR(d, layer=layer)
geo1 <- readOGR(d, layer="layer")
geo1 <- readOGR(d, layer=geo1)
geo1 <- readOGR(d, layer="geo1")
geo1 <- readOGR(d, layer=GEOL_UNITS)
geo1 <- readOGR(d, layer="GEOL_UNITS")
geo1 <- readOGR(d, layer="GEOL_UNI1")
geo1 <- readOGR(d, layer="GEOL_UNI_1")
?readOGR
ogrInfo(d)
install.packages(data.table)
library(data.table)
installed.packages()
install.packages("ggplot2")
version()
version
version
install.packages("ggplot2")
library(ggplot2)
library('ggplot2')
options(width=80) # default = 140. print pretty.
library(rgdal)
# d <- "Geology/M-243DM/Geology_polys.shp"  # Thompson
d <- "/home/kmf76/Dropbox/NZ/res/data/QMapRobin"  # QMAP - KF
# KF the above file is JUST Canterbury region obtained from Robin.
a <- ogrListLayers(d)
# geo1 <- readOGR(d, "Geology_polys")
geo1 <- readOGR(d, layer="Geol_units")
# KF additional files Thompson loaded that I don't need:
# d <- "Geology/MF-1198-101/RMS_MF-1198-101_TA_v1.shp"
# ogrListLayers(d)
# geo2 <- readOGR(d, "RMS_MF-1198-101_TA_v1")
# d <- "Geology/MF-1198-102/RMS_MF-1198-102_TA_v1.shp"
# ogrListLayers(d)
# geo3 <- readOGR(d, "RMS_MF-1198-102_TA_v1")
# d <- "Geology/MF-2109/RMS_MF-2109_TA_v1.shp"
# ogrListLayers(d)
# geo4 <- readOGR(d, "RMS_MF-2109_TA_v1")
# d <- "Geology/I-1944/RMS_I-1944_TA_v1.shp"
# ogrListLayers(d)
# geo5 <- readOGR(d, "RMS_I-1944_TA_v1")
# KF print some data about what's contained in QMAP file.
dim(geo1)                       # 1061 polygons total.
head(unique(geo1$GEOL_UNITS))   # unique ID for each polygon
head(geo1$GEOL_UNI_1)           # code IDing the geology for each polygon.
max(geo1$GEOL_UNI_1)            # 194 unique geologic units in Canterbury.
head(unique(geo1$DESCRIPTIO))   # 139 comments incl NA
unique(geo1$UNIQUE_COD)         # 111 UNIQUE CODES incl NA.
unique(geo1$MAP_UNIT)           # 91 map units including <NA>
unique(geo1$UNIT_CODE)          # 85 unit codes
unique(geo1$MAIN_ROCK)          # 26 main rock units including <NA>
unique(geo1$SUB_ROCKS)          # 69 sub rocks including <NA>
unique(geo1$TEXT_CODE)          # 65 TEXT_CODES incl NA.
unique(geo1$CONFIDENCE)         # 56 interpretation/confidence comments incl. NA
unique(geo1$STRAT_UNIT)         # 50 stratigraphic units including <NA>
unique(geo1$STRAT_AGE)          # 46 stratigraphy age including <NA>
unique(geo1$ROCK_GROUP)         # 22 rock groups incl NA
unique(geo1$SEQUENCE)           # 10 sequences including <NA>
unique(geo1$ROCK_CLASS)         # 7 rock classes incl NA
unique(geo1$TERRANE)            # 5 terrane including <NA>
unique(geo1$ABS_MIN)            # Don't know what these are. Maybe geologic age estimates? Don't care right now.
summary(geo1$ABS_MIN)
unique(geo1$ABS_MAX)
summary(geo1$ABS_MAX)
library(rgdal)
d <- "/home/kmf76/Dropbox/NZ/res/data/QMapRobin"  # QMAP - KF
a <- ogrListLayers(d)
library(rgdal)
install.packages(rgdal)
install.packages(rgdal)
options(width=80) # default = 140. print pretty.
library(rgdal)
options(width=80) # default = 140. print pretty.
library(rgdal)
??rgdal
?rgdal
library()
install.packages("rgdal")
options(width=80) # default = 140. print pretty.
library(rgdal)
d <- "/home/kmf76/Dropbox/NZ/res/data/QMapRobin"  # QMAP - KF
a <- ogrListLayers(d)
library(rgdal)
chooseCRANmirror()
options("repos")[[1]][1]
quit()
install.packages(rgdal)
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
options(width=80) # default = 140. print pretty.
library(rgdal)
d <- "/home/kmf76/Dropbox/NZ/res/data/QMapRobin"  # QMAP - KF
a <- ogrListLayers(d)
geo1 <- readOGR(d, layer="Geol_units")
dim(geo1)                       # 1061 polygons total.
head(unique(geo1$GEOL_UNITS))   # unique ID for each polygon
head(geo1$GEOL_UNI_1)           # code IDing the geology for each polygon.
max(geo1$GEOL_UNI_1)            # 194 unique geologic units in Canterbury.
head(unique(geo1$DESCRIPTIO))   # 139 comments incl NA
unique(geo1$UNIQUE_COD)         # 111 UNIQUE CODES incl NA.
unique(geo1$MAP_UNIT)           # 91 map units including <NA>
unique(geo1$UNIT_CODE)          # 85 unit codes
unique(geo1$MAIN_ROCK)          # 26 main rock units including <NA>
unique(geo1$SUB_ROCKS)          # 69 sub rocks including <NA>
unique(geo1$TEXT_CODE)          # 65 TEXT_CODES incl NA.
unique(geo1$CONFIDENCE)         # 56 interpretation/confidence comments incl. NA
unique(geo1$STRAT_UNIT)         # 50 stratigraphic units including <NA>
unique(geo1$STRAT_AGE)          # 46 stratigraphy age including <NA>
unique(geo1$ROCK_GROUP)         # 22 rock groups incl NA
unique(geo1$SEQUENCE)           # 10 sequences including <NA>
unique(geo1$ROCK_CLASS)         # 7 rock classes incl NA
unique(geo1$TERRANE)            # 5 terrane including <NA>
unique(geo1$ABS_MIN)            # Don't know what these are. Maybe geologic age estimates? Don't care right now.
summary(geo1$ABS_MIN)
unique(geo1$ABS_MAX)
summary(geo1$ABS_MAX)
# # unique ages in each:
uage1 <- unique(geo1$AGE)
# uage2 <- unique(geo2$age)
# uage3 <- unique(geo3$age)
# uage4 <- unique(geo4$age)
# uage5 <- unique(geo5$age)
#
# # Use these to define a new function 'classifyAge'
# # in the file functions.R
uage1
geo1
unique(geo1$TERRANE)            # 5 terrane including <NA>
unique(geo1$ROCK_CLASS)         # 7 rock classes incl NA
unique(geo1$SEQUENCE)           # 10 sequences including <NA>
unique(geo1$ROCK_GROUP)         # 22 rock groups incl NA
unique(geo1$STRAT_AGE)          # 46 stratigraphy age including <NA>
unique(geo1$STRAT_UNIT)         # 50 stratigraphic units including <NA>
unique(geo1$STRAT_AGE)          # 46 stratigraphy age including <NA>
unique(geo1$MAIN_ROCK)          # 26 main rock units including <NA>
unique(geo1$SUB_ROCKS)          # 69 sub rocks including <NA>
unique(geo1$TEXT_CODE)          # 65 TEXT_CODES incl NA.
unique(geo1$CONFIDENCE)         # 56 interpretation/confidence comments incl. NA
unique(geo1$STRAT_UNIT)         # 50 stratigraphic units including <NA>
unique(geo1$STRAT_AGE)          # 46 stratigraphy age including <NA>
unique(geo1$ROCK_GROUP)         # 22 rock groups incl NA
geo1[1]
struct(geo1)
struc(geo1)
structure(geo1)
unique(geo1$SEQUENCE)           # 10 sequences including <NA>
unique(geo1$ROCK_GROUP)         # 22 rock groups incl NA
unique(geo1$STRAT_AGE)          # 46 stratigraphy age including <NA>
uage1 <- unique(geo1$STRAT_AGE) # ET
uage1
sort(unique(uage1)) #KF
source("functions.R")
source("functions.R")
getwd()
set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
library(ggplot2)
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data = diamonds)
qplot(log(carat), price, data = diamonds)
qplot(log(carat), log(price), data = diamonds)
qplot(carat, x * y * z, data = diamonds)
qplot(carat, price, data = dsmall, colour = color)
dsmall$carat
dsmall$cut
dsmall$color
qplot(carat, price, data = dsmall, shape = cut)
?I
qplot(carat, price, data = diamonds, alpha = I(1/10))
qplot(carat, price, data = diamonds, alpha = I(1/100))
qplot(carat, price, data = diamonds, alpha = I(1/200))
qplot(carat, price, data = diamonds, alpha = I(1/200), geom = "smooth")
qplot(carat, price, data = diamonds, alpha = I(1/200), geom = "boxplot")
qplot(cut, price, data = diamonds, alpha = I(1/200), geom = "boxplot")
qplot(cut, price, data = dsmall, geom = "line")
qplot(cut, price, data = dsmall, geom = "path")
qplot(carat, price, data = dsmall, geom = "path")
qplot(carat, price, data = dsmall, geom = "line")
qplot(price, data = dsmall, geom = "histogram")
qplot(price, data = dsmall, geom = "histogram", binwidth = 1000)
qplot(price, data = dsmall, geom = "freqpoly", binwidth = 1000)
qplot(price, data = dsmall, geom = "freqpoly", binwidth = 100)
qplot(price, data = dsmall, geom = "freqpoly", binwidth = 1000)
qplot(price, data = dsmall, geom = "density", binwidth = 1000)
qplot(price, data = dsmall, geom = "density")
qplot(price, data = diamonds, geom = "density")
qplot(carat, price, data = dsmall, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"))
qplot(carat, price, data = diamonds, geom = c("point", "smooth"), se = FALSE)
qplot(carat, price, data = diamonds, geom = c("point", "smooth"))
qplot(carat, data = diamonds, geom = "histogram")
qplot(carat, data = diamonds, geom = "density")
qplot(carat, data = diamonds, geom = "histogram", binwidth = 1,
xlim = c(0,3))
qplot(carat, data = diamonds, geom = "histogram", binwidth = 0.1,
xlim = c(0,3))
qplot(carat, data = diamonds, geom = "histogram", binwidth = 0.01,
xlim = c(0,3))
qplot(carat, data = diamonds, geom = "histogram", fill = color)
qplot(carat, data = diamonds, geom = "density", colour = color)
qplot(carat, data = diamonds, geom = "histogram", fill = color)
qplot(color, data = diamonds, geom = "bar")
qplot(color, data = diamonds, geom = "bar", weight = carat)
qplot(color, data = diamonds, geom = "bar", weight = carat) + scale_y_continuous("carat")
qplot(color, data = diamonds, geom = "bar", weight = carat)
qplot(color, data = diamonds, geom = "bar", weight = carat) + scale_y_continuous("carat")
qplot(color, data = diamonds, geom = "bar")
qplot(color, data = diamonds, geom = "bar", weight = carat) + scale_y_continuous("carat")
qplot(date, unemploy / pop, data = economics, geom = "line")
qplot(date, uempmed, data = economics, geom = "line")
year <- function(x) as.POSIXlt(x)$year + 1900
?as.POSIXlt
economics$date[1]
qplot(unemploy / pop, uempmed, data = economics,
geom = c("point", "path"))
qplot(unemploy / pop, uempmed, data = economics,
geom = "path", colour = year(date)) + scale_area()
qplot(unemploy / pop, uempmed, data = economics,
geom = "path", colour = year(date))
?scale_size_area
qplot(unemploy / pop, uempmed, data = economics,
geom = "path", colour = year(date)) + scale_size()
qplot(unemploy / pop, uempmed, data = economics,
geom = "path", colour = year(date)) + scale_alpha()
qplot(unemploy / pop, uempmed, data = economics,
geom = "path", colour = year(date)) + scale_shape()
qplot(unemploy / pop, uempmed, data = economics,
geom = "path", colour = year(date)) + scale_size_area()
qplot(displ, hwy, data = mpg, colour = factor(cyl))
qplot(displ, hwy, data=mpg, facets = . ~ year) + geom_smooth()
?factor
?interaction()
?gl
?interaction()
a <- gl(2, 4, 8)
b <- gl(2, 2, 8, labels = c("ctrl", "treat"))
s <- gl(2, 1, 8, labels = c("M", "F"))
a
b
s
interaction(a,b)
install.packages(rgdal)
install.packages("rgdal")
install.packages("rgdal")
library(rgdal)
library("rgdal")
library("ggplot2")
# colors
library("RColorBrewer")
display.brewer.all() # to view palettes
p <- character(length = 13)
p <- c(
"#FFFF00",  # fill
"#fee0b6",  # alluvial
"#c9c9c9",  # till
"#00CC99",  # marsh
"#0099CC",  # lacustrine
"#542788",  # colluv
"#2d004b",  # aeol
"#f7f7f7",  #glaciers/snowfields
"#7f3b08",  # igneous
"#b35806",  #metamorphic
"#e08214",  # sedimentary
"#b2abd2",  # limestone
"#fdb863"   #undifferentiated
)
pal <- palette(p)
# Geo - polygons
load("~/big_noDB/geo/QMAP_Seamless_July13K_NZGD00.Rdata")
# Vs30 - points
load("~/VsMap/in/vspr.Rdata")
# Choose one - entire island or Canterbury-only (faster)
# plotMap <- map_NZGD00.df
plotMap <- map_NZGD00.Cant.df
# reorder geoGroup for nice legend plotting
plotMap$geoGroup <- factor(x = plotMap$geoGroup,levels = c(
"Fill", "Alluvial", "Glacial", "Marsh", "Lacustrine", "Colluvial/Landslide", "Eolian",
"Glaciers/snowfields", "Igneous", "Metamorphic", "Sedimentary", "Limestone", "Undifferentiated Rock"))
# background map - shared by most of the plots below
bgMap <- ggplot() +
geom_polygon(mapping=aes(long, lat, group=group, fill=geoGroup), data=plotMap) +
scale_fill_manual(values = pal)
vspr.df <- data.frame(vspr)
p1 <- subset(vspr.df, DataSource == "McGannCPT")
p2 <- subset(vspr.df, DataSource == "CantSMS")
p3 <- subset(vspr.df, DataSource == "Wotherspoon")
vsprp.df <- data.frame(vspr_pre_cull)
p1p <- subset(vsprp.df, DataSource == "McGannCPT")
p2p <- subset(vsprp.df, DataSource == "CantSMS")
p3p <- subset(vsprp.df, DataSource == "Wotherspoon")
np1  <- dim(p1)[1]
np1p <- dim(p1p)[1]
np2  <- dim(p2)[1]
np2p <- dim(p2p)[1]
np3  <- dim(p3)[1]
np3p <- dim(p3p)[1]
# #NZGD49
# xLims <- c(2380000,
#            2530000)
# yLims <- c(5650000,
#            5800000)
#NZGD00
xLims <- c(1470000,
1620000)
yLims <- c(5100000,
5250000)
bgMap +
coord_equal(ratio=1, xlim=xLims,ylim=yLims) +
geom_point(mapping=aes(Easting,Northing,color=Vs30), data=vspr.df, alpha=0.6) +
scale_colour_gradient(low="#CC99FF",high="blue") +
ggtitle("Depositional units - Vs30 overlay")
p <- character(length = 13)
p <- c(
"#FFFF00",  # fill
"#fee0b6",  # alluvial
"#c9c9c9",  # till
"#00CC99",  # marsh
"#0099CC",  # lacustrine
"#542788",  # colluv
"#2d004b",  # aeol
"#f7f7f7",  #glaciers/snowfields
"#7f3b08",  # igneous
"#b35806",  #metamorphic
"#e08214",  # sedimentary
"#b2abd2",  # limestone
"#fdb863"   #undifferentiated
)
pal <- palette(p)
# background map - shared by most of the plots below
bgMap <- ggplot() +
geom_polygon(mapping=aes(long, lat, group=group, fill=geoGroup), data=plotMap) +
scale_fill_manual(values = pal)
bgMap +
coord_equal(ratio=1, xlim=xLims,ylim=yLims) +
geom_point(mapping=aes(Easting,Northing,color=Vs30), data=vspr.df, alpha=0.6) +
scale_colour_gradient(low="#CC99FF",high="blue") +
ggtitle("Depositional units - Vs30 overlay")
ggsave(file = paste0("~/VsMap/out/depmap_Vs30_",whichMap,".png"), units="in", width=12, height=10)
x <- c(21,24.5,25,22,12,8,15.5,9,9,9,22.5,29.5,16,10,22,22,11)
d <- density(x)
plot(d)
x <- c(10,11.25,11.25,11.25,12.5,13.75,19.375,20.41666,20.8333,18.3333,18.3333,24.583333,15,18.3333,18.75,20,17.5)
d <- density(x)
plot(d)
x <- c(8,9,9,9,10,11,15.5,16.333,16.667,16.667,14.667,14.667,19.667,12,14.667,15,16,14)
d <- density(x)
plot(d)
x <- c(8,9,9,9,10,11,15.5,16.333,16.667,16.667,14.667,14.667,19.667,12,14.667,15,16,14)
median(x)
setwd("~/VsMap/")
load("Hyb_NZGD00.Rdata")
library(rgdal)
library(raster)
library(rgeos)
library(Grid2Polygons)
library(spatstat)
source("functions.R")
source("geodetic.R")
load("slp_NZGD00.Rdata")
slpOnly <- calc(slp, Uslope)
save(slpOnly, file = "slpOnly.Rdata")
HybFill <- Hyb
HybFill[is.na(HybFill)] <- slpOnly[is.na(HybFill)]
plot(HybFill)
save(HybFill, file = "HybFill.Rdata")
HybWGS84 <- projectExtent(object=Hyb,crs=crsWGS84())
HybWGS84 <- projectRaster(from=Hyb, to=HybWGS84)
#writeRaster(Hyb, "Hyb.tif", format = "GTiff")
writeRaster(HybWGS84, "HybWGS84.tif", format = "GTiff", overwrite=TRUE)
# Need to call GRDCONVERT to convert TIF to NetCDF for GMT... OR
writeRaster(HybWGS84, "HybWGS84.nc", format = "CDF")
install.packages("netcdf")
install.packages("ncdf4")
install.packages("ncdf4")
writeRaster(HybWGS84, "HybWGS84.nc", format = "CDF")
writeRaster(HybWGS84, "HybWGS84.nc", format = "CDF", overwrite=TRUE)
rm(list = ls())
load("~/big_noDB/geo/QMAP_Seamless_July13K_NZGD00.Rdata")
source("~/VsMap/geodetic.R")
library(sp)
setwd("~/NZ/res/VsMap/GMsim_Vs30_extract")
points_WGS84 <- read.delim("./all_geoNet_stats.ll")
points_WGS84
points_WGS84$X171.7476.....43.9024........ADCS
points_WGS84
points_WGS84 <- read.delim("./all_geoNet_stats.ll")
points_WGS84$Site.Longitude
?read.delim
coordsWGS84 <- SpatialPoints(coords = points_WGS84[c("Site.Longitude", "Site.Latitude")],
proj4string = crsWGS84(), bbox = NULL)
points_WGS84 <- read.delim("./all_geoNet_stats.ll")
coordsWGS84 <- SpatialPoints(coords = points_WGS84[c("Site.Longitude", "Site.Latitude")],
proj4string = crsWGS84(), bbox = NULL)
points_WGS84 <- read.delim("./all_geoNet_stats.ll", sep=" ")
points_WGS84 <- read.delim("./all_geoNet_stats.ll", sep=" ", strip.white=TRUE)
points_WGS84 <- read.delim("./all_geoNet_stats.ll", sep=" ", strip.white=TRUE)
coordsWGS84 <- SpatialPoints(coords = points_WGS84[c("Site.Longitude", "Site.Latitude")],
proj4string = crsWGS84(), bbox = NULL)
points_WGS84[c("Site.Longitude", "Site.Latitude")]
points_WGS84[c("Site.Longitude")]
points_WGS84 <- read.delim("./all_geoNet_stats.ll")
points_WGS84 <- read.delim("./all_geoNet_stats.ll")
coordsWGS84 <- SpatialPoints(coords = points_WGS84[c("Site.Longitude", "Site.Latitude")],
proj4string = crsWGS84(), bbox = NULL)
points_WGS84 <- read.delim("./all_geoNet_stats.ll")
points_WGS84
points_WGS84$Site.Longitude
points_WGS84$Site.Latitude
points_WGS84 <- read.delim("./all_geoNet_stats.ll")
coordsWGS84 <- SpatialPoints(coords = points_WGS84[c("Site.Longitude", "Site.Latitude")],
proj4string = crsWGS84(), bbox = NULL)
points_WGS84 <- SpatialPointsDataFrame(coords = coordsWGS84,
data   = data.frame(points_WGS84[c("Site.Code","Name","Vs30")]))
points_WGS84 <- SpatialPointsDataFrame(coords = coordsWGS84,
data   = data.frame(points_WGS84$Site.Code))
points_NZGD00 <- convert2NZGD00(points_WGS84)
geoData <- points_NZGD00 %over% map_NZGD00  # returns a dataframe with polygon metadata for each Vs point.
geoData1 <- subset(geoData, select = c("SIMPLE_NAME","age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
geoData2 <- cbind(geoData1, as.data.frame(points_NZGD00))
geoData3  <- SpatialPointsDataFrame(points_NZGD00, data=geoData2)
outPoints <- convert2WGS84(geoData3)
outP.df <- as.data.frame(outPoints)
outP.df2 <- subset(outP.df, select = c("Site.Code","Site.Longitude.1","Site.Latitude.1","Name","SIMPLE_NAME",
"age1","age2","age3","gs","dep","geoGroup","Vs30","Vs_sgeo"))
outP.df2 <- subset(outP.df, select = c("Site.Code","Site.Longitude.1","Site.Latitude.1","Name","SIMPLE_NAME",
"age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
outP.df <- as.data.frame(outPoints)
outP.df2 <- subset(outP.df, select = c("Site.Code","Site.Longitude.1","Site.Latitude.1","Name","SIMPLE_NAME",
"age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
outP.df2 <- subset(outP.df, select = c("Site.Code","Site.Longitude","Site.Latitude","Name","SIMPLE_NAME",
"age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
outP.df2 <- subset(outP.df, select = c("Site.Code","Site.Longitude","Site.Latitude","SIMPLE_NAME",
"age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
outP.df$Site.Latitude
outP.df$Site.Latitude.1
outP.df2 <- subset(outP.df, select = c("Site.Code","Site.Longitude.1","Site.Latitude.1","SIMPLE_NAME",
"age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
outP.df$points_WGS84.Site.Code
outP.df2 <- subset(outP.df, select = c("points_WGS84.Site.Code","Site.Longitude.1","Site.Latitude.1","SIMPLE_NAME",
"age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
write.csv(outP.df2, file = "./sitesOut.csv", row.names = FALSE)
rm(list = ls())
load("~/big_noDB/geo/QMAP_Seamless_July13K_NZGD00.Rdata")
source("~/VsMap/geodetic.R")
library(sp)
setwd("~/NZ/res/VsMap/GMsim_Vs30_extract")
# Loading locations where Vs30 value estimates are needed for simulation -------------
#points_WGS84 <- read.delim("./all_geoNet_stats.ll")
points_WGS84 <- read.delim("./geonet_stations_20161220.ll")
coordsWGS84 <- SpatialPoints(coords = points_WGS84[c("Site.Longitude", "Site.Latitude")],
proj4string = crsWGS84(), bbox = NULL)
points_WGS84 <- SpatialPointsDataFrame(coords = coordsWGS84,
data   = data.frame(points_WGS84$Site.Code))
points_NZGD00 <- convert2NZGD00(points_WGS84)
# Find out which points are in which polygon using over() (point-in-polygon testing)
geoData <- points_NZGD00 %over% map_NZGD00  # returns a dataframe with polygon metadata for each Vs point.
geoData1 <- subset(geoData, select = c("SIMPLE_NAME","age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
geoData2 <- cbind(geoData1, as.data.frame(points_NZGD00))
geoData3  <- SpatialPointsDataFrame(points_NZGD00, data=geoData2)
outPoints <- convert2WGS84(geoData3)
outP.df <- as.data.frame(outPoints)
outP.df2 <- subset(outP.df, select = c("points_WGS84.Site.Code","Site.Longitude.1","Site.Latitude.1","SIMPLE_NAME",
"age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
write.csv(outP.df2, file = "./sitesOut.csv", row.names = FALSE)
coordsWGS84 <- SpatialPoints(coords = points_WGS84[c("Site.Longitude", "Site.Latitude")],
proj4string = crsWGS84(), bbox = NULL)
points_WGS84 <- SpatialPointsDataFrame(coords = coordsWGS84,
data   = data.frame(points_WGS84$Site.Code))
points_NZGD00 <- convert2NZGD00(points_WGS84)
points_WGS84 <- read.delim("./geonet_stations_20161220.ll")
points_WGS84
points_WGS84 <- read.delim("./geonet_stations_20161220.ll")
points_WGS84
coordsWGS84 <- SpatialPoints(coords = points_WGS84[c("Site.Longitude", "Site.Latitude")],
proj4string = crsWGS84(), bbox = NULL)
points_WGS84 <- SpatialPointsDataFrame(coords = coordsWGS84,
data   = data.frame(points_WGS84$Site.Code))
points_NZGD00 <- convert2NZGD00(points_WGS84)
geoData <- points_NZGD00 %over% map_NZGD00  # returns a dataframe with polygon metadata for each Vs point.
geoData1 <- subset(geoData, select = c("SIMPLE_NAME","age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
geoData2 <- cbind(geoData1, as.data.frame(points_NZGD00))
geoData3  <- SpatialPointsDataFrame(points_NZGD00, data=geoData2)
outPoints <- convert2WGS84(geoData3)
outP.df <- as.data.frame(outPoints)
outP.df2 <- subset(outP.df, select = c("points_WGS84.Site.Code","Site.Longitude.1","Site.Latitude.1","SIMPLE_NAME",
"age1","age2","age3","gs","dep","geoGroup","Vs_sgeo"))
write.csv(outP.df2, file = "./sitesOut.csv", row.names = FALSE)
